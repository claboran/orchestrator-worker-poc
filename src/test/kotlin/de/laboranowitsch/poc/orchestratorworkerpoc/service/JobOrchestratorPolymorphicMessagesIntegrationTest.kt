package de.laboranowitsch.poc.orchestratorworkerpoc.service

import de.laboranowitsch.poc.orchestratorworkerpoc.data.PageDoneMessage
import de.laboranowitsch.poc.orchestratorworkerpoc.data.PageStatus
import de.laboranowitsch.poc.orchestratorworkerpoc.data.PageStatus.*
import de.laboranowitsch.poc.orchestratorworkerpoc.data.StartJobMessage
import de.laboranowitsch.poc.orchestratorworkerpoc.entity.JobState
import de.laboranowitsch.poc.orchestratorworkerpoc.entity.JobStatus
import de.laboranowitsch.poc.orchestratorworkerpoc.entity.PageData
import de.laboranowitsch.poc.orchestratorworkerpoc.repository.JobStateRepository
import de.laboranowitsch.poc.orchestratorworkerpoc.repository.PageStateRepository
import de.laboranowitsch.poc.orchestratorworkerpoc.testutil.IntegrationTests
import org.assertj.core.api.Assertions.assertThat
import org.awaitility.Awaitility.await
import org.junit.jupiter.api.Test
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.beans.factory.annotation.Value
import org.springframework.data.repository.findByIdOrNull
import org.springframework.test.context.ActiveProfiles
import java.time.Duration
import java.util.*

@IntegrationTests
@ActiveProfiles("test", "orchestrator")
class JobOrchestratorPolymorphicMessagesIntegrationTest @Autowired constructor(
    private val jobStateRepository: JobStateRepository,
    private val pageStateRepository: PageStateRepository,
    private val sqsMessageSender: SqsMessageSender,
    @param:Value("\${app.queues.control-queue}") private val controlQueueName: String,
) {

    @Test
    fun `should handle StartJobMessage with sealed interface polymorphism`() {
        // Let PocPagePayloadService generate the job with pages (will use default config)
        // This simulates the real behavior where pages are generated by the service
        sendControlMessage(
            sqsMessageSender = sqsMessageSender,
            queue = controlQueueName,
            payload = createStartJobMessage(),
        )

        await()
            .atMost(Duration.ofSeconds(5))
            .pollDelay(Duration.ofMillis(500))
            .untilAsserted {
                // Verify job and pages were created and dispatched after processing StartJobMessage
                val job = jobStateRepository.findByIdOrNull(JOB_ID)
                assertThat(job).isNotNull
                val pages = pageStateRepository.findByJobStateId(JOB_ID)
                assertThat(pages).isNotEmpty
                assertThat(pages).allMatch { it.status == CREATED }
            }
    }

    @Test
    fun `should handle PageDoneMessage with sealed interface polymorphism`() {
        // Create a job state with a page in CREATED status
        val jobState = JobState(id = JOB_ID, status = JobStatus.CREATED)
        val pageState = jobState.addPage(PageData(itemIds = listOf(UUID.randomUUID())))
        jobStateRepository.save(jobState)
        
        val testPageId = pageState.id

        val message = createPageDoneMessage(
            status = FINISHED,
            errorMessage = null,
            pageId = testPageId.toString(),
        )

        sendControlMessage(
            sqsMessageSender = sqsMessageSender,
            queue = controlQueueName,
            payload = message,
        )

        await()
            .atMost(Duration.ofSeconds(5))
            .pollDelay(Duration.ofMillis(500))
            .untilAsserted {
                // Verify page status was updated to FINISHED
                val updatedPage = pageStateRepository.findByIdOrNull(testPageId)
                assertThat(updatedPage).isNotNull
                assertThat(updatedPage?.status).isEqualTo(FINISHED)
            }
    }

    @Test
    fun `should handle PageDoneMessage with failure`() {
        // Create a job state with a page in CREATED status
        val jobState = JobState(id = JOB_ID, status = JobStatus.CREATED)
        val pageState = jobState.addPage(PageData(itemIds = listOf(UUID.randomUUID())))
        jobStateRepository.save(jobState)
        
        val testPageId = pageState.id

        val message = createPageDoneMessage(
            status = FAILED,
            errorMessage = "Simulated error message",
            pageId = testPageId.toString(),
        )

        sendControlMessage(
            sqsMessageSender = sqsMessageSender,
            queue = controlQueueName,
            payload = message,
        )

        await()
            .atMost(Duration.ofSeconds(5))
            .pollDelay(Duration.ofMillis(500))
            .untilAsserted {
                // Verify page status was updated to FAILED
                val updatedPage = pageStateRepository.findByIdOrNull(testPageId)
                assertThat(updatedPage).isNotNull
                assertThat(updatedPage?.status).isEqualTo(FAILED)
            }
    }

    companion object {
        private val JOB_ID: UUID = UUID.randomUUID()
        private val PAGE_ID: UUID = UUID.randomUUID()

        @JvmStatic
        fun createStartJobMessage() = StartJobMessage(
            jobId = JOB_ID.toString(),
        )

        @JvmStatic
        fun createPageDoneMessage(
            status: PageStatus,
            errorMessage: String? = null,
            jobId: String = JOB_ID.toString(),
            pageId: String = PAGE_ID.toString(),
        ) = PageDoneMessage(
            jobId = jobId,
            pageId = pageId,
            pageStatus = status,
            errorMessage = errorMessage,
        )

        @JvmStatic
        fun sendControlMessage(
            sqsMessageSender: SqsMessageSender,
            queue: String,
            payload: Any,
            jobId: String = JOB_ID.toString(),
        ) {
            sqsMessageSender.sendMessage(
                queue,
                payload,
                mapOf("job-id" to jobId),
            )
        }
    }
}
